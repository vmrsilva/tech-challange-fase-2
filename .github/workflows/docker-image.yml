name: Git Actions Tech Challenge

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Clona todo o histórico, garantindo que todos os arquivos existam


    - name: Configurar .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restaurar pacotes
      run: dotnet restore ./TechChallange/TechChallange.sln

    - name: Compilar o código
      run: dotnet build ./TechChallange/TechChallange.sln --no-restore --configuration Release

    - name: Set up Docker
      run: docker info

    - name: Executar testes unitários e de integração
      run: dotnet test ./TechChallange/TechChallange.sln --no-build --configuration Release --logger trx
      env:
        DOTNET_EnablePreviewFeatures: "true"

    - name: Salvar resultados dos testes
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: "**/*.trx"

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./TechChallange
          file: ./TechChallange.Api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dockerfordotnetapi:latest, ${{ secrets.DOCKERHUB_USERNAME }}/dockerfordotnetapi:${{ github.run_number }}
